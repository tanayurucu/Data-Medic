// <auto-generated />
using System;
using DataMedic.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataMedic.Persistence.Migrations
{
    [DbContext(typeof(DataMedicDbContext))]
    partial class DataMedicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataMedic.Domain.Components.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Components", (string)null);
                });

            modelBuilder.Entity("DataMedic.Domain.ControlSystems.ControlSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("ControlSystems", (string)null);
                });

            modelBuilder.Entity("DataMedic.Domain.Departments.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("DataMedic.Domain.DeviceGroups.DeviceGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("DeviceGroups", (string)null);
                });

            modelBuilder.Entity("DataMedic.Domain.Devices.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InventoryNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DeviceGroupId");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("DataMedic.Domain.Emails.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Emails", (string)null);
                });

            modelBuilder.Entity("DataMedic.Domain.Hosts.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Uris")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hosts", (string)null);
                });

            modelBuilder.Entity("DataMedic.Domain.OperatingSystems.OperatingSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("OperatingSystems", (string)null);
                });

            modelBuilder.Entity("DataMedic.Domain.Sensors.Entities.DockerSensor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastLog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortainerId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ScanPeriod")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("DockerSensors", (string)null);
                });

            modelBuilder.Entity("DataMedic.Domain.Sensors.Entities.KafkaSensor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("IdentifierValue")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<long>("TimeToLiveInSeconds")
                        .HasColumnType("bigint");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("KafkaSensors", (string)null);
                });

            modelBuilder.Entity("DataMedic.Domain.Sensors.Entities.MqttSensor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("TimeToLiveInSeconds")
                        .HasColumnType("bigint");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("MqttSensors", (string)null);
                });

            modelBuilder.Entity("DataMedic.Domain.Sensors.Entities.NodeRedSensor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FlowId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastErrorLog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("ScanPeriodInMinutes")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("NodeRedSensors", (string)null);
                });

            modelBuilder.Entity("DataMedic.Domain.Sensors.Entities.PingSensor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ScanPeriod")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("PingSensors", (string)null);
                });

            modelBuilder.Entity("DataMedic.Domain.Sensors.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastCheckOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StatusText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("Sensors", (string)null);
                });

            modelBuilder.Entity("DataMedic.Domain.Devices.Device", b =>
                {
                    b.HasOne("DataMedic.Domain.Departments.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataMedic.Domain.DeviceGroups.DeviceGroup", null)
                        .WithMany()
                        .HasForeignKey("DeviceGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsMany("DataMedic.Domain.Devices.Entities.DeviceComponent", "Components", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("Id");

                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ComponentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ControlSystemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedOnUtc")
                                .HasColumnType("datetime2");

                            b1.Property<string>("IpAddress")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<DateTime?>("ModifiedOnUtc")
                                .HasColumnType("datetime2");

                            b1.Property<Guid>("OperatingSystemId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id", "DeviceId");

                            b1.HasIndex("ComponentId");

                            b1.HasIndex("ControlSystemId");

                            b1.HasIndex("DeviceId");

                            b1.HasIndex("OperatingSystemId");

                            b1.ToTable("DeviceComponents", (string)null);

                            b1.HasOne("DataMedic.Domain.Components.Component", null)
                                .WithMany()
                                .HasForeignKey("ComponentId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.HasOne("DataMedic.Domain.ControlSystems.ControlSystem", null)
                                .WithMany()
                                .HasForeignKey("ControlSystemId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");

                            b1.HasOne("DataMedic.Domain.OperatingSystems.OperatingSystem", null)
                                .WithMany()
                                .HasForeignKey("OperatingSystemId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();
                        });

                    b.Navigation("Components");
                });

            modelBuilder.Entity("DataMedic.Domain.Emails.Email", b =>
                {
                    b.HasOne("DataMedic.Domain.Departments.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DataMedic.Domain.Hosts.Host", b =>
                {
                    b.OwnsOne("DataMedic.Domain.Hosts.ValueObjects.HostCredential", "Credential", b1 =>
                        {
                            b1.Property<Guid>("HostId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte[]>("EncryptedCredential")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.Property<byte[]>("EncryptionIV")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.Property<string>("Username")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("HostId");

                            b1.ToTable("Hosts");

                            b1.WithOwner()
                                .HasForeignKey("HostId");
                        });

                    b.OwnsOne("DataMedic.Domain.Hosts.ValueObjects.HostSslConfiguration", "SslConfiguration", b1 =>
                        {
                            b1.Property<Guid>("HostId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte[]>("CertificateAuthorityData")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.Property<byte[]>("CertificateData")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.Property<string>("Passphrase")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("HostId");

                            b1.ToTable("Hosts");

                            b1.WithOwner()
                                .HasForeignKey("HostId");
                        });

                    b.Navigation("Credential")
                        .IsRequired();

                    b.Navigation("SslConfiguration")
                        .IsRequired();
                });

            modelBuilder.Entity("DataMedic.Domain.Sensors.Sensor", b =>
                {
                    b.HasOne("DataMedic.Domain.Hosts.Host", null)
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DataMedic.Domain.Sensors.ValueObjects.SensorDetail", "SensorDetail", b1 =>
                        {
                            b1.Property<Guid>("SensorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("DetailId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("SensorId");

                            b1.ToTable("Sensors");

                            b1.WithOwner()
                                .HasForeignKey("SensorId");
                        });

                    b.Navigation("SensorDetail")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
